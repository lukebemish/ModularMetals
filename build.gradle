plugins {
    alias libs.plugins.mdg
    alias libs.plugins.quilt.loom apply false
}

var normal = ['Quilt', 'Common', 'Forge']

modsDotGroovy {
    dslVersion = '1.3.0'
    platform 'multiloader'
}

subprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
        maven {
            name = 'TheModdingInquisition'
            url = 'https://maven.moddinginquisition.org/releases'
        }
        maven {
            url "https://maven.lukebemish.dev/releases"
        }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        // For Excavated Variants
        mavenLocal()
    }
}

subprojects {
    if (!normal.contains(project.name))
        return

    apply plugin: 'groovy'
    apply plugin: 'maven-publish'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }
    tasks.withType(GroovyCompile).configureEach {
        it.groovyOptions.fork = true
        it.groovyOptions.encoding = 'UTF-8'
        it.groovyOptions.optimizationOptions.indy = true
        it.groovyOptions.optimizationOptions.groovydoc = true
        it.groovyOptions.javaAnnotationProcessing = true
        //it.groovyOptions.keepStubs = true // for debugging
        it.groovyOptions.configurationScript = rootProject.file('compile.groovy')
        it.exclude('mods.groovy')
    }

    tasks.compileGroovy { t ->
        t.options.compilerArgs += [
                "-Aautoextension.name=${mod_name}",
                "-Aautoextension.version=${version}"
        ]
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    configurations {
        testCompileOnly.extendsFrom(compileOnly)
    }

    dependencies {
        compileOnly libs.groovy.core
        compileOnly libs.groovy.templates

        annotationProcessor libs.autoextension
        annotationProcessor libs.autoservice
        compileOnly libs.autoextension
        compileOnly libs.autoservice
    }
}

subprojects {
    if (normal.contains(project.name))
        return
    if (!project.name.startsWith('Quilt'))
        return

    var rootName = project.name.substring(6)

    apply plugin: libs.plugins.quilt.loom.get().pluginId
    apply plugin: libs.plugins.mdg.get().pluginId

    if (project.file("../$rootName/properties.gradle").exists())
        apply from: "../$rootName/properties.gradle"

    sourceSets {
        main {
            resources {
                srcDirs = ["../$rootName/src"]
            }
        }
    }

    loom {
        runs {
            client {
                client()
                setConfigName("(Addons) $rootName Quilt Client")
                ideConfigGenerated(true)
                runDir("run")
            }
            server {
                server()
                setConfigName("(Addons) $rootName Quilt Server")
                ideConfigGenerated(true)
                runDir("run")
            }
        }
    }

    modsDotGroovy {
        dslVersion = '1.3.0'
        platforms 'quilt'
        arguments['modularMetalsVersion'] = rootProject.version
    }

    dependencies {
        minecraft libs.minecraft
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.mappings.get()}@zip")
        }

        modImplementation libs.quilt.loader
        modImplementation libs.qfapi
        modImplementation libs.cgl.quilt
        runtimeOnly libs.groovyduvet.groovy
        modImplementation libs.groovyduvet.all
        modImplementation libs.dynassetgen.quilt
        modImplementation libs.defaultresources.quilt

        implementation project(path: ":Quilt", configuration: 'instrumentedJars')
    }
}
